version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm i
            npm i oauth-sign --save
            npm i --package-lock-only
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm i
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Front-end test
          command: |
            cd ~/project/frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end test
          command: |
            cd ~/project/backend
            npm run test
            
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Front-end audit
          command: |
            cd ~/project/frontend
            npm update
            npm i oauth-sign --save
            npm audit --audit-level=critical --force
      # - run:
      #     name: Audit fix
      #     command: |
      #       cd ~/project/frontend
      #       npm audit fix --audit-level=critical --force
      #     when: on_fail

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end scan
          command: |
            cd ~/project/backend
            npm i
            npm audit --audit-level=critical
      - run:
          name: Audit fix
          command: |
            cd ~/project/backend
            npm audit fix --audit-level=critical --force
          when: on_fail
            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeopleback \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeoplefront \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicDnsName" --filters "Name=tag:project,Values=udapeopleback" --region us-west-2 --output text)
            echo "${BACKEND_URL}"
            echo "${BACKEND_URL}" >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${BACKEND_URL}" https://api.memstash.io/values/backend_url
      - run: 
          name: Install dependencies
          command: | 
            yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['2f:c0:9f:0c:82:6e:2e:00:7f:fd:b2:10:3b:d0:bf:3b']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i ./inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm run migrations > migration
            cat migration
      - run:
          name: Send migration results to memstash
          command: |
            cd ~/project/backend
            echo grep -c "No migrations are pending" migration
            MIGRATION_RESULT=`grep -c "No migrations are pending" migration`
            echo $MIGRATION_RESULT
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${MIGRATION_RESULT} \
               https://api.memstash.io/values/migration_result
            TEST_RESPONSE=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_result)
            echo "test memstash result"
            echo ${TEST_RESPONSE}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:12.x
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Get backend url
          command: |
            BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_url)
            # BACKEND_URL=$(curl -H "token: sometoken" --request GET https://api.memstash.io/values/backend_url)
            echo "${BACKEND_URL}"
            export API_URL="http://${BACKEND_URL}:3000"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - add_ssh_keys:
          fingerprints: ['2f:c0:9f:0c:82:6e:2e:00:7f:fd:b2:10:3b:d0:bf:3b']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            # apk add --update npm
      - run:
          name: Deploy backend
          command: |
            cd ~/project/backend
            ls 
            # npm i
            # npm run build
            cd ~/project/.circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
      - run:
          name: Get backend url
          command: |
            BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_url)
            export API_URL="https://${BACKEND_URL}:3000/api/status"
      - run:
          name: Backend smoke test.
          command: |
            if curl -s "${API_URL}" | grep "ok"
            then
              return 1
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-west-2.amazonaws.com/#/"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]